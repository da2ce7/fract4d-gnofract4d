/* Gnofract4D -- a little fractal generator-browser program
 * Copyright (C) 1999-2001 Edwin Young
 *
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 */

#ifndef _COLORFUNC_H_
#define _COLORFUNC_H_

#include "colorizer_public.h"
#include "calc.h"
#include "pointFunc.h"

#include <iosfwd>
#include <string>

colorFunc_t *
colorFunc_read(std::istream& s);

// abstract base class
class colorFunc {
 public:
    virtual ~colorFunc() {};

    virtual colorFunc *clone() const = 0;

    virtual e_colorFunc type(void) const = 0;
    virtual rgb_t operator()(int iter, double *scratch, bool potential) const = 0;
#ifdef HAVE_GMP
    virtual rgb_t operator()(int iter, gmp::f *scratch, bool potential) const = 0;
#endif
    virtual std::ostream& put(std::ostream&) const = 0;
    virtual std::istream& get(std::istream&) = 0;
    virtual bool operator==(const colorFunc&) const = 0;
};

std::ostream& operator<<(std::ostream& s, const colorFunc& cizer);
std::istream& operator>>(std::istream& s, colorFunc& cizer);

// draws fract based on variations of a single {r,g,b} color
class rgb_colorFunc : public colorFunc{
 public: 
    double r, g, b;
	
 private:
    static const double contrast;
    double cr, cg, cb;
 public:
    rgb_colorFunc(void);
    rgb_colorFunc(const rgb_colorFunc&);
    ~rgb_colorFunc();

    colorFunc* clone() const { return new rgb_colorFunc(*this); }

    e_colorFunc type() const;
    rgb_t operator()(int iter, double *scratch, bool potential) const;
#ifdef HAVE_GMP
    rgb_t operator()(int iter, gmp::f *scratch, bool potential) const;
#endif
    bool operator==(const colorFunc&) const;

    friend std::ostream& operator<<(std::ostream&, const rgb_colorFunc&);
    friend std::istream& operator>>(std::istream&, rgb_colorFunc&);
	std::ostream& put(std::ostream& s) const { return s << *this; };
	std::istream& get(std::istream& s) { return s >> *this; };


    // not shared with colorFunc
    void set_colors(double _r, double _g, double _b);
};

class cmap_colorFunc : public colorFunc {
 public:
    static const int size;
 public:
    rgb_t *cmap;
    std::string name;

    cmap_colorFunc();
    ~cmap_colorFunc();
    cmap_colorFunc(const cmap_colorFunc&);
    cmap_colorFunc& operator=(const cmap_colorFunc&);
    bool operator==(const colorFunc& c) const;

    colorFunc* clone() const { return new cmap_colorFunc(*this); }

    e_colorFunc type() const;
    rgb_t operator()(int iter, double *scratch, bool potential) const;
#ifdef HAVE_GMP
    rgb_t operator()(int iter, gmp::f *scratch, bool potential) const;
#endif
    friend std::ostream& operator<<(std::ostream&, const cmap_colorFunc&);
    friend std::istream& operator>>(std::istream&, cmap_colorFunc&);
	std::ostream& put(std::ostream& s) const { return s << *this; };
	std::istream& get(std::istream& s) { return s >> *this; };
	
    // not shared with colorFunc
    // FIXME: should return a status indication or throw
    void set_cmap_file(const char *filename);
};

#endif /*_COLORFUNC_H_*/
