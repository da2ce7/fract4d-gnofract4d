#!/usr/bin/env python

# the main GUI program. Relies on fract4d libs to do the real work
version = '2.8'

# python stdlib
import sys
import os
import getopt
import distutils.sysconfig

# gettext
import gettext
os.environ.setdefault('LANG', 'en')
if os.path.isdir('po'):
    gettext.install('gnofract4d','po')
else:
    gettext.install('gnofract4d')

# gtk
try:
    import gtk
except ImportError, err:
    print _("Can't find PyGTK. You need to install it before you can run Gnofract 4D.")
    sys.exit(1)

# check for pygtk >=1.99
pygtk_ok = True
try:
    (major,minor,patch) = gtk.pygtk_version
    if major < 2:
        if minor < 99:
            pygtk_ok = False
    import gobject
    
except Exception:
    pygtk_ok = False

if not pygtk_ok:
    print _("Sorry, your PyGTK version is too old. You need at least 1.99")
    sys.exit(1)

try:
    libdir = distutils.sysconfig.get_config_var('LIBDIR')
except distutils.errors.DistutilsPlatformError, err:
    # we get this on Mandrake 10.0 - apparently python is set up strangely
    libdir = '/usr/lib'

try:
    # we install our libs privately instead of to site-packages
    sys.path.append(os.path.join(libdir, 'gnofract4d-%s' % version))
    # gui modules
    from fract4dgui import main_window, preferences
    
except ImportError, err:
    print _('''
Can't import a required module.
If you haven't set up Gnofract 4D yet, run './setup.py build'
Error was: '%s' ''') % err
    sys.exit(1)

# We don't use GDK threads because RedHat seem to compile pygtk
# without thread support. Grrr.
#gtk.gdk.threads_init()

def help():
    print """Gnofract 4D %s
Usage: gnofract4d [flags] [paramfile]

Flags:
-h --help\t\tShow this message
-p --params FILE\tUse FILE as a parameter file
-q --quit\t\tExit as soon as the image is finished
-s --save IMAGEFILE\tSave image to IMAGEFILE
-i --width N\t\tMake image N pixels wide
-j --height N\t\tMake image N pixels tall
-P --path P\t\tAdd P to the formula search path
-f --formula F#func\tUse formula 'func' in file F

To generate an image non-interactively, use:
gnofract4d -s myimage.png -q myfractal.fct

""" % version

def main():
    mainWindow = main_window.MainWindow()

    width = preferences.userPrefs.getint("display","width")
    height = preferences.userPrefs.getint("display","height")

    try:
        (opts, args) = getopt.getopt(
            sys.argv[1:],
            "p:i:j:s:qhP:",
            [ "params=",
              "width=",
              "height=",
              "save=",
              "help",
              "path=",
              "formula=",
              "quit"])

        for (name, val) in opts:
            if name=="-p" or name=="--params":
                args.insert(0,val)
            elif name=="-q" or name=="--quit":
                mainWindow.quit_when_done = True
            elif name=="-s" or name=="--save":
                mainWindow.save_filename = val
            elif name=="-i" or name=="--width":
                width = int(val)
            elif name=="-j" or name=="--height":
                height = int(val)
            elif name=="-h" or name=="--help":
                help()
                return
            elif name=="-P" or name=="--path":
                mainWindow.compiler.file_path.append(val)
            elif name=="--formula":
                n = val.rfind('#')
                if n==-1:
                    help()
                    print "ERROR: --formula should be file#func"
                    return 1
                (file, func) = (val[:n], val[n+1:])
                path = os.path.dirname(file)
                basename = os.path.basename(file)
                if path: 
                    mainWindow.compiler.file_path.append(path)
                mainWindow.f.set_formula(basename,func)
            else:
                print "Unknown argument", name, val
    except getopt.GetoptError:
        help()
        return 1
    
    mainWindow.f.set_size(width,height)

    mainWindow.f.thaw()
    if len(args) > 0:
        mainWindow.load(args[0])
    else:
        mainWindow.on_fractal_change()
    
    gtk.main()
    
if __name__ == '__main__':
    if os.environ.get("DO_GF4D_PROFILE"):
        import hotshot
        prof = hotshot.Profile("gf4d.prof")
        prof.runcall(main)
        prof.close()
    else:
        main()
