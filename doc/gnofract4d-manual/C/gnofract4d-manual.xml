<?xml version="1.0" standalone="no"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
<!ENTITY stdlib SYSTEM "stdlib.xml">
<!ENTITY gf4d "<application>Gnofract 4D</application>">
<!ENTITY fractint "<application>Fractint</application>">
<!ENTITY ultrafractal "<application>UltraFractal</application>">
]>
<article id="gnofract4d">
<articleinfo>
<author><firstname>Edwin</firstname><surname>Young</surname></author>
<date>1999-12-12</date>
<title>Gnofract 4D</title>
<subtitle><emphasis>For when 2D fractals just aren't weird enough</emphasis></subtitle>
</articleinfo>

<sect1 id="introduction">
<title>Introduction</title>
<epigraph><attribution>Francis Bacon</attribution>
<para>
There is no excellent beauty which hath not some strangeness in the proportion.
</para>
</epigraph>

<para>&gf4d; is a program which draws complex mathematical
objects known as fractals, including the Mandelbrot and Julia sets and
many others. It allows you to treat a fractal which has more than one
parameter as a four-dimensional object and interactively view slices
of this object from arbitrary angles, giving rise to some very unusual
images.
</para>
 
<para>
This user's manual provides a tutorial introduction to &gf4d; and the
mathematical background behind it, information on how to use the
graphical interface, and reference material on the language used to
write fractal formulas.

</para>

</sect1>

<sect1 id="using">
<title>Using &gf4d;</title>
<para>

&gf4d;'s screen layout is deliberately simple. Most of the screen is
taken up by a viewport onto the fractal you're investigating. By
default, this is the Mandelbrot set. You can directly click on this to
zoom. The toolbar provides quick access to frequently used functions,
and more complex properties of the fractal are accessed through dialog
boxes brought up via the menu bar.
</para>

<para>
Initially, just play around - after all, generating fractals isn't
meant to be <emphasis>work</emphasis>. If you make a change you don't
like, just hit Undo.
</para>

<sect2 id="basics">
<title>Interacting with the Fractal</title> 

<para>
Each fractal is an infinitely complex image, which you can see a slice
of in the main window. By left-clicking on the window, you can zoom in
to view finer and finer details. Just click on an area you like to
view it more closely. If you click and drag with the left button, you can
draw a white box around an area. When you let go, you zoom in
so that the area inside that box fills the window. 
</para>

<para>
To zoom back out, click with the right button. You can also press
<keycap>Home</keycap> to return to the starting point for this
fractal, or use <guibutton>Undo</guibutton> to go back one step.
There isn't a click and drag feature for the right button.
</para>

<para>
Clicking with the middle button rotates the view by 90 degrees in the
<emphasis>xz</emphasis> and <emphasis>yw</emphasis> axes. If you're
currently looking at the Mandelbrot set, you'll get a Julia set, and
vice versa. If you're looking at something else, you'll get something
weird. Note that clicking this twice doesn't take you back to where
you started: the screen also gets recentered on the point you clicked,
so clicking twice will normally give you a perturbed, deformed-looking
Mandelbrot.
</para>

<para>
The cursor keys pan around the image. Hold down
<keycap>Control</keycap>+ <keycap>&lt;cursor&gt;</keycap> to move more
quickly. Hold down <keycap>Shift</keycap> +
<keycap>&lt;cursor&gt;</keycap> to move around in the other two
dimensions, mutating the image.  </para> 

</sect2>

<sect2 id="files">
<title>Working with Files</title>

<para>

&gf4d; uses several different types of file. These have different
purposes as listed in the table below.

<informaltable>
<tgroup cols="3">

<thead><row>
<entry>File Type</entry>
<entry>Extensions</entry>
<entry>Description</entry>
</row></thead>

<tbody>
<row>
<entry>
Parameter File
</entry>
<entry><filename class="extension">.fct</filename></entry>
<entry>

A parameter file is a small text file which contains all the settings
required to produce a particular image, such as the position of the
viewer along the X axis and the coloring scheme used. The parameter
file lists the formula used, but doesn't contain the entire formula,
so if you invent a new formula and want to share parameter files which
use it, you need to distribute the formula file as well.

&fractint; uses <filename class="extension">.par</filename> files for
this purpose and &ultrafractal; uses <filename
class="extension">.upr</filename>. Unfortunately &gf4d; can't read
those formats (yet).
</entry>
</row>
<row>
<entry>
Image File
</entry>
<entry>
<filename class="extension">.jpg</filename>,
<filename class="extension">.png</filename>
</entry>

<entry>
&gf4d; supports JPEG and PNG file formats for image
output. <emphasis>No information about the fractal parameters is
stored in the image file</emphasis>, so if you want to carry on
exploring from a particular point you need to save a parameter file as
well. &gf4d; can't load image files, only save them. Choose
<guimenu>File</guimenu> &gt; <guimenuitem>Save Image</guimenuitem> to
save an image.
I recommend
using PNG images for high quality output, and JPEGs only when image
size is important, because JPEGs introduce artifacts which blur the
fine details of your fractal.
</entry>

</row>

<row>
<entry>
Formula File
</entry>
<entry>
<filename class="extension">.frm</filename>,
<filename class="extension">.ufm</filename>
</entry>
<entry>

A formula file is a collection of formulas, each of which is a
description of the algorithm used to draw a particular kind of
fractal, expressed in a simple programming language (see <xref
linkend="reference"></xref> for language details). Both &gf4d; and &fractint;
use <filename class="extension">.frm</filename> as the extension, and
&ultrafractal; uses <filename class="extension">.ufm</filename>. In
general, any formula which works in &fractint; should work in &gf4d;
and any which works in &gf4d; should work in &ultrafractal;, but the
reverse is not true. 

</entry>
</row>

<row>
<entry>
Coloring Algorithm File
</entry>
<entry>
<filename class="extension">.cfrm</filename>,
<filename class="extension">.ucl</filename>
</entry>
<entry>

A coloring algorithm file is a collection of formulas used to assign
colors to a fractal. &gf4d; combines a coloring algorithm with a
formula to produce the final image (this approach is shared with
&ultrafractal; - &fractint; restricts you to built-in coloring
algorithms).  Coloring algorithms are written in the same language as
fractal formulas. &ultrafractal; uses the extension .ucl for its
coloring algorithm files. Some of these are compatible with &gf4d; but
so far not very many.
</entry>
</row>

</tbody>
</tgroup>
</informaltable>
</para>

</sect2>

<sect2 id="tools">
<title>Tools</title>

<sect3 id="autozoom">
<title>Autozoom</title> 

<para> Autozoom automatically searches for interesting parts of the
fractal by zooming in repeatedly, each time choosing the quadrant of
the screen which has the largest number of different colors (with some
randomization as well). You can start it going, go off for a coffee,
and see what it's found when you return, or guide it by clicking on
parts you like as it goes. It'll stop when the image reaches the
minimum size, which is set by default to stop just before you get to
the limits of the precision &gf4d; offers.

  </para>

</sect3>

<sect3 id="explorer">
<title>Explorer</title>

<para>
The <emphasis>Explorer</emphasis> helps you find neat-looking fractals
easily. It divides the screen into a large central section and smaller
"subfractals" which surround it. The central section is the main image
- you can click on this to zoom in, change the color, or perform any
operation you can normally. The other images around the edges are
"mutant" versions of the main image - they're formed by starting with
the base parameters and randomly changing them a bit. Whenever you
change the main images, you get a whole new set of mutants. If you
like a mutant more than the main picture, click on it to move it to
the middle - it then becomes the main picture and you get 12 new
mutants based on the new main image. To return to normal mode, click
the Explorer button again.  </para>

<para> The "weirdness slider" on the toolbar
determines how different the mutants are from the standard image. If
it's set to 100, they're almost unrecognizable - if it's 0, they're
exactly the same. 
</para>

</sect3>

<sect3 id="browser">
<title>Formula Browser</title>
<para>

The <emphasis>Formula Browser</emphasis> allows you to look at all the
fractal formulas and coloring functions which are in the currently-loaded
formula files. When you select a formula (from the Formula list in the
middle), the source window shows you the contents of that formula. You
can then use <guibutton>Apply</guibutton> to change the current
fractal to use that formula. This also resets the formula's parameters
to their defaults. Alternatively, <guibutton>OK</guibutton> applies
the formula and closes the window.  </para>

<para>
Tips: 
<itemizedlist>

<listitem><para> To load a new formula file, choose <guimenu>File</guimenu>
&gt; <guimenuitem>Open Formula File</guimenuitem>. </para></listitem>

<listitem><para> If you have changed a formula on disk, choose
<guibutton>Refresh</guibutton> to have &gf4d; re-read
it. </para></listitem>

<listitem><para> If the formula contains errors,
<guibutton>Apply</guibutton> and <guibutton>OK</guibutton> will be
disabled. Check the Messages window to see what the errors
are. </para></listitem>

</itemizedlist>
</para>
</sect3>
</sect2>

<sect2 id="toolbar">
<title>Toolbar buttons</title>
<para>
On the left of the toolbar you can see a small preview window, which
updates as you change the angle or position buttons, to give you an
idea of what the fractal will look like when you release the button.
</para>

<para>
The first eight toolbar buttons correspond to the ten parameters which
define the view. The circular angle buttons, labelled <emphasis>xy</emphasis> to
<emphasis>zw</emphasis>, can changed by dragging the dot around. When you let
go, the fractal will update. By the way, the <emphasis>zw</emphasis> angle does
work, you just can't see its effects until you rotate in some other
dimensions first.
</para>

<para>
The square position buttons, <emphasis>pan</emphasis> and
<emphasis>wrp</emphasis> (aka Warp), can be used to alter the view. The
<emphasis>pan</emphasis> button allows you to pan around the current
view. The <emphasis>wrp</emphasis> button allows you to move along the
other two axes, resulting in a mutated version of the current image.
Click inside one then drag the mouse, watching the preview window
update, then release the mouse when you like the results.  </para>

<para>
The weird black and white button (OK, so I can't draw) allows you to
increase the current iteration count, for those occasions when the
auto-deepening doesn't get it right.  </para> <para> The
<emphasis>Undo</emphasis> and <emphasis>Redo</emphasis> buttons should
be fairly obvious. You can undo as many times as you like. Note that
undo also affects parameters such as color, not just position on
screen.  Lastly, the <emphasis>Explore</emphasis> button toggles
Explorer Mode. See <xref linkend="explorer"/>.</para>
  
</sect2>

<sect2 id="preferences">
<title>Changing Fractal Settings</title> 

<para> In &gf4d;, settings are divided into <emphasis>Fractal
Settings</emphasis> and
<emphasis>Preferences</emphasis>. <emphasis>Fractal
Settings</emphasis> are saved in the fractal's .fct file - they are
properties of the fractal itself. By contrast, <emphasis>
Preferences</emphasis> are your preferences for &gf4d;'s general
behavior and are saved in &gf4d;'s config file (~/.gnome/gnofract4d),
so they will still be active next time you start &gf4d; </para>

<sect3 id="settingsdialog">
<title>Fractal Settings</title>
<para>

The <emphasis>Formula</emphasis> section allows you to choose the
formula used to calculate the fractal, and to set any parameters the
formula has. You can modify the formula by choosing <guibutton>Browse
</guibutton>, which invokes the Formula Browser. <emphasis>Max
Iterations</emphasis> sets the number of iterations a point will go
through before we give up and assume it's a member of the
Julibrot. The other parameters on this pane are different depending on
the fractal type.
</para>

<para>
The <emphasis>Outer</emphasis> page controls the function used to
decide what color to draw those points which aren't part of the
fractal set proper. Similarly, the <emphasis>Inner</emphasis> page
controls the function used for points which are part of the set.
</para> 

<para>
The <emphasis>Location</emphasis> entryboxes allow you to
change the coordinates of the screen center and the image size. 

The <emphasis>Angles</emphasis> tab allows you to set the rotation
angles. Only values between 0 and 2 * pi are different; values outside
this range "wrap" to points inside that range.
</para>

</sect3>

<sect3 id="prefsdialog">
<title>Preferences</title> 

<para> <emphasis>Width</emphasis> and <emphasis>Height</emphasis> set
the size of the image in pixels. If <emphasis>Maintain Aspect
Ratio</emphasis> is checked when you change either the width or
height, the other automatically changes to keep the image the same
shape. If <emphasis>Auto Deepen</emphasis> is enabled, &gf4d; will try
to automatically guess how many iterations are required to display the
image correctly. <emphasis>Antialiasing</emphasis> makes the image
look smoother but takes extra time to do.  </para>

<para>
&gf4d; needs a C++ compiler to be available at runtime in order to
work (it dynamically creates the code to compute a particular formula
when you select it). The <emphasis>Compiler</emphasis>
page allows you to specify a location for the compiler and options
to pass to it. <emphasis>If &gf4d; is working fine, I suggest you
leave this area alone.</emphasis></para> 

</sect3>

</sect2>

</sect1>

<sect1 id="maths">
<title> About the maths</title>

<caution>
<title>Warning: Dubious mathematics ahead</title>
<para>I'm not a mathematician. You may find this discussion
insultingly oversimplified or just plain wrong.
</para>
</caution>

<sect2 id="mset" >
<title>The Mandelbrot Set</title> <para> The Mandelbrot may be
calculated as the set of all complex numbers which, when you
repeatedly square them and add them again, never become infinite. (The
official definition of the set is somewhat different: it is the set of
points in the complex plane whose corresponding Julia sets are
connected. These end up being the same thing.)

We can tell that a number will eventually reach infinity if it ever
gets outside a circle of radius 2 around the origin. Unfortunately, we
can't tell in general that a point will never become infinite, so we
have to estimate by trying a large number of times before giving up.
</para>
<para>
In pseudocode, the procedure is:
</para>
<programlisting>
z = 0
while( magnitude(z) &lt; 2.0 )
     z = z^2 + c
</programlisting>

<para>
Here, <emphasis>c</emphasis> is determined by the position on screen. This
gives rise to the familiar Mandelbrot set:

<graphic align="center" format="PNG"
fileref="figures/mandelbrot_standard.png"> </graphic>

All the points inside the set are (as is traditional) coloured
black. The points outside the set are different colours depending on
how long it takes them to escape from the set. These colours aren't
very mathematically significant, but they look nice.
</para>

<para>
So what happens if <emphasis>z</emphasis> is initially set to a
complex value other than zero? (Strictly speaking, you shouldn't do
this. Zero is important because it is the <emphasis>critical
value</emphasis> of z^2+c - other values are not mathematically
meaningful. However, as with most fractal programs, &gf4d; allows you
to draw anything which looks interesting, regardless of its
mathematical purity.)

Well, you get a rather odd-looking, deformed M-set.  This initial
value, which we'll call <emphasis>z0</emphasis>, is called the intial
perturbation, and sets which have a non-zero <emphasis>z0</emphasis>
are known as <emphasis>perturbed</emphasis> sets: 

<graphic align="center" format="PNG"
fileref="figures/mandelbrot_perturbed.png"> </graphic>

</para> </sect2>

<sect2 id="julia">
<title>The Julia Set</title>

<para>
The Julia set is actually drawn by the same procedure as the
Mandelbrot set. But instead of changing the value of
<emphasis>c</emphasis> for each pixel, we keep <emphasis>c</emphasis>
constant and change <emphasis>z0</emphasis>. There is a different
Julia set for each value of <emphasis>c</emphasis>; here's the one for
<emphasis>c</emphasis>=0.

<graphic align="center" format="PNG"
fileref="figures/julia_standard.png"> </graphic>

</para>

<para>
Boring, isn't it? That's because we're just squaring the value at each
iteration without adding anything to it. So any value which starts
with a magnitude less than 1 will shrink forever (and hence is a
member of the set). All other values will grow forever, and so we've
just discovered a rather inefficient way of drawing perfect circles.
If we use a different value of <emphasis>c</emphasis> we get something more
interesting: 

<graphic align="center" format="PNG"
fileref="figures/julia_perturbed.png"> </graphic>

</para>
</sect2>

<sect2 id="julibrot">
<title>The Julibrot</title> 
<para>

Here we come to the heart of the matter. I said above that both the
Julia and Mandelbrot sets are drawn with the <emphasis>same
function</emphasis>. 
<programlisting>
julibrot(z0,c)
z = z0
iterations = 0
while( magnitude(z) &lt; 4.0 and iterations &lt; max_iterations )
     z = z^2 + c
     iterations = iterations + 1
</programlisting>

The Julibrot function has two complex parameters, or four real
ones. In &gf4d; I refer to the real parameters as x, y, z, and w:
these are c.re , c.im, z0.re and z0.im respectively.

The only difference is which points we choose to draw. To draw the
Mandelbrot set, we keep <emphasis>z0</emphasis> constant and change
<emphasis>c</emphasis> with each pixel. To draw the Julia set, we keep
<emphasis>c</emphasis> constant and change <emphasis>z0</emphasis>. If
you squint with your brain a bit, you can imagine both sets as
orthogonal "slices" through the same four-dimensional object. In
&gf4d; terms, the Mandelbrot set is the <emphasis>xy</emphasis>
plane, and the Julia set is the <emphasis>zw</emphasis> plane. We can
also look at other planes: here's an image of the
<emphasis>xw</emphasis> plane:

<graphic align="center" format="PNG"
fileref="figures/xw_plane.png"> </graphic>

</para>
</sect2>

<sect2 id="viewing">
<title>Viewing in Four Dimensions</title>
<para>
However, we can draw any 2D slice we like, not just those which are
parallel to the Julibrot axes. To do this we'll need to describe our
scene by four things. First, the (<emphasis>x,y,z,w</emphasis>)
coordinates of the center of the screen. Second, a vector for the
x-axis of the screen. This tells us how to change the parameters to
the Julibrot function as we proceed across the screen. Third, a vector
for the y-axis. Fourth and finally, the size of the image. For the
Mandelbrot set, our "default" view, the screen is centered at
[0,0,0,0], the x-vector is [1,0,0,0] and the y-vector is
[0,1,0,0]. The initial size is 4, because the whole Mandelbrot set
fits inside the 2x2 square. We can zoom into the set by changing
<emphasis>x</emphasis> and <emphasis>y</emphasis> and the zoom factor.
</para>
<para>
If we want to draw other slices, we need to rotate our view through
four dimensions. In 3D, we can rotate in 3 directions: around the
<emphasis>x</emphasis>, <emphasis>y</emphasis>, and
<emphasis>z</emphasis> axes. In 4D, we rotate around a <emphasis>
plane </emphasis> rather than a line, and we can rotate in 6
directions: around the <emphasis>xy, xz, xw, yz, yw</emphasis> and
<emphasis>zw</emphasis> planes. For example, if we rotate through 90
degrees in the xz and yw directions, our screen vectors become
[0,0,1,0] and [0,0,0,1]: in other words, the Julia set. If we rotate
only part of the way, we get a "hybrid" between the two sets, which
looks decidedly odd:

<graphic align="center" format="PNG" fileref="figures/hybrid.png">
</graphic>

In fact, we can rotate to any angle in each of the planes,
creating a whole world of bizarre pictures.
</para>

</sect2>

<sect2 id="hypercomplex">
<title>Hypercomplex Fractals and Quaternions</title> 

<para> There are other kinds of fractal which are commonly described
as "four-dimensional" - hypercomplex and quaternion-based
fractals. &gf4d; doesn't currently support these fractals
directly (though you can create your own quaternion-based formulas),
so they're only mentioned here to clarify the difference. (If you want
to generate hypercomplex fractals I recommend you try <ulink
url="http://www.physcip.uni-stuttgart.de/phy11733/quat_e.html">
Quat</ulink>.) Hypercomplex numbers have four components (one real and
three imaginary) where complex numbers have two. Since the
hypercomplex mandelbrot has two hypercomplex parameters, in Gnofract
4D terms it's actually an eight-dimensional object.  </para>

</sect2>
</sect1>

<sect1 id="compiler">
<title>Writing Your Own Functions</title>

<para>
When you get tired of the fractal functions which come with Gnofract
4D, you can write your own, or take advantage of thousands of formulas
written by other fractal enthusiasts. Gnofract4D can load most fractal
formula files written for &fractint; (and some written for
&ultrafractal;). However the compiler is not 100%
backwards-compatible with &fractint;, so unfortunately some fractals
can't be loaded, or will display differently when they do. &gf4d;
also supports many constructs &fractint; doesn't, so you need to take
extra care when writing formulas if you want them to work in &fractint;
too.
</para>

<para>
Here are links to some online resources for formula files:
<itemizedlist>

<listitem><para> <ulink
url="http://home.att.net/~Paul.N.Lee/OrgForm.html">ORGFORM.ZIP</ulink>
A collection of about 25,000 &fractint; formula files by many authors,
originally compiled by George C. Martin and currently maintained by
Paul N. Lee. Indispensable. </para></listitem>

<listitem><para> <ulink
url="http://formulas.ultrafractal.com/">&ultrafractal; public formula
database</ulink> Over 4.5MB of formulas by users of &ultrafractal;. Many
(but by no means all) of these will work with &gf4d;. Let me know
of any issues, since I aim to improve compatibility further in future
releases. </para></listitem>

</itemizedlist>
</para>

<sect2 id="tutorial">
<title>Writing Your First Formula</title>

<para>
For now, I suggest copying one of the formulas which come with
&gf4d; into a new file, and modifying it using trial and error.
</para>

</sect2>

</sect1>

<sect1 id="reference">
<title>Formula Language Reference</title>
&stdlib;
</sect1>


<sect1 id="bugs">
<title>Bugs and Known Issues</title>

<sect2 id="reporting">

<title>Reporting Bugs</title> 

<para>
<emphasis>Please</emphasis> report any bugs you encounter, either by
mailing <ulink
url="mailto:edwin@sourceforge.net">edwin@sourceforge.net</ulink> or by
using the <ulink url="http://sourceforge.net/tracker/?func=add&amp;group_id=785&amp;atid=100785">bug
form</ulink> at SourceForge. I'll do my best to fix them.
</para>

</sect2>

<sect2 id="compat">
<title>Backwards Compatibility</title>

<para>
Version 2.0 contains major architectural changes from version 1.x, so
unfortunately not all images generated by earlier versions will look
exactly the same or even load correctly. If you have a favorite image
which doesn't work any more, mail me the .fct file and I'll try and
convert it. I hope to fix most of these issues in future versions.
</para>
<para>
Specific known issues:
<itemizedlist>

<listitem> <para> Files generated by &gf4d; versions older than
1.4 can't be loaded. </para>
</listitem>

<listitem> <para> Color ranges (as opposed to color maps) are not
supported. </para> </listitem>

<listitem> <para> Only one colormap per file is supported (the outer
one). Inner colormaps are ignored. </para> </listitem>

</itemizedlist>

</para>

</sect2>
</sect1>

<sect1 id="about">
<title>About &gf4d;</title>
<para>

This is &gf4d; version 2.0. You can find the most recent version of
&gf4d; from <ulink url="http://gnofract4d.sourceforge.net">
http://gnofract4d.sourceforge.net/</ulink>. 
</para>
<para>
&gf4d; was originally based on Gnofract, written by Aurelien Alleaume
<ulink url="mailto:manchot@club-internet.fr">(manchot@club-internet.fr)
</ulink>,
though none of the original code remains in the current version.
Gnofract could once be obtained from
<ulink url="http://www.multimania.com/mason/">
http://www.multimania.com/mason/</ulink> but this no longer appears to
work.  &gf4d; is by Edwin Young <ulink
url="mailto:edwin@sourceforge.net">(edwin@sourceforge.net) </ulink>.
The &gf4d; distribution contains palette (.map) files by a number of
authors which were originally distributed with <ulink
url="http://spanky.triumf.ca/">&fractint;</ulink> under somewhat murky
licensing conditions.
</para>
<para>
&gf4d; is distributed under the <emphasis>BSD license</emphasis>. 
See the file "COPYING" for details.
</para>
</sect1>

</article>

