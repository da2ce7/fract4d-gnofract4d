<?xml version="1.0" standalone="no"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
<!ENTITY stdlib SYSTEM "stdlib.xml">
]>
<article id="gnofract4d">
<articleinfo>
<author><firstname>Edwin</firstname><surname>Young</surname></author>
<date>1999-12-12</date>
<title>Gnofract 4D</title>
<subtitle><emphasis>For when 2D fractals just aren't weird enough</emphasis></subtitle>
</articleinfo>

<sect1 id="introduction">
<title>Introduction</title>

<para>Gnofract 4D is a program which draws complex mathematical
objects known as fractals, including the Mandelbrot and Julia sets and
many others. It allows you to treat a fractal which has more than one
parameter as a four-dimensional object and interactively view slices
of this object from arbitrary angles, giving rise to some very unusual
images.
</para>
 
<para>
This documentation covers version 2.0. For the most recent
documentation and release, check <ulink
url="http://gnofract4d.sourceforge.net/">
http://gnofract4d.sourceforge.net</ulink>. 
</para>

</sect1>

<sect1 id="maths">
<title> About the maths</title>

<caution>
<title>Warning: Dubious mathematics ahead</title>
<para>I'm not a mathematician. You may find this discussion
insultingly oversimplified or just plain wrong.
</para>
</caution>

<sect2 id="mset" >
<title>The Mandelbrot Set</title> <para> The Mandelbrot may be calculated as
the set of all complex numbers which, when you repeatedly square them
and add them again, never become infinite.

<footnote>
<para>
The official definition of the set is somewhat different: it is the
set of points in the complex plane whose corresponding Julia sets are
connected. These end up being the same thing.  </para>
</footnote>

We can tell that a number will eventually reach infinity if it ever
gets outside a circle of radius 2 around the origin. Unfortunately, we
can't tell in general that a point will never become infinite, so we
have to estimate by trying a large number of times before giving up.
</para>
<para>
In pseudocode, the procedure is:
</para>
<programlisting>
z = 0
while( magnitude(z) &lt; 2.0 )
     z = z^2 + c
</programlisting>

<para>
Here, <emphasis>c</emphasis> is determined by the position on screen. This
gives rise to the familiar Mandelbrot set:

<graphic align="center" format="PNG"
fileref="figures/mandelbrot_standard.png"> </graphic>

All the points inside the set are (as is traditional) coloured
black. The points outside the set are different colours depending on
how long it takes them to escape from the set. These colours aren't
very mathematically significant, but they look nice.
</para>

<para>
So what happens if <emphasis>z</emphasis> is initially set to a complex value
other than zero? <footnote>

<para>
Strictly speaking, you shouldn't do this. Zero is important because it
is the <emphasis>critical value</emphasis> of z^2+c - other values are
not mathematically meaningful. However, as with most fractal programs,
Gnofract 4D allows you to draw anything which looks interesting,
regardless of its mathematical purity.  </para> </footnote>

Well, you get a rather odd-looking, deformed M-set.  This initial
value, which we'll call <emphasis>z0</emphasis>, is called the intial
perturbation, and sets which have a non-zero <emphasis>z0</emphasis>
are known as <emphasis>perturbed</emphasis> sets: 

<graphic align="center" format="PNG"
fileref="figures/mandelbrot_perturbed.png"> </graphic>

</para> </sect2>

<sect2 id="julia">
<title>The Julia Set</title>

<para>
The Julia set is actually drawn by the same procedure as the
Mandelbrot set. But instead of changing the value of
<emphasis>c</emphasis> for each pixel, we keep <emphasis>c</emphasis>
constant and change <emphasis>z0</emphasis>. There is a different
Julia set for each value of <emphasis>c</emphasis>; here's the one for
<emphasis>c</emphasis>=0.

<graphic align="center" format="PNG"
fileref="figures/julia_standard.png"> </graphic>

</para>

<para>
Boring, isn't it? That's because we're just squaring the value at each
iteration without adding anything to it. So any value which starts
with a magnitude less than 1 will shrink forever (and hence is a
member of the set). All other values will grow forever, and so we've
just discovered a rather inefficient way of drawing perfect circles.
If we use a different value of <emphasis>c</emphasis> we get something more
interesting: 

<graphic align="center" format="PNG"
fileref="figures/julia_perturbed.png"> </graphic>

</para>
</sect2>

<sect2 id="julibrot">
<title>The Julibrot</title> 
<para>

Here we come to the heart of the matter. I said above that both the
Julia and Mandelbrot sets are drawn with the <emphasis>same
function</emphasis>. 
<programlisting>
julibrot(z0,c)
z = z0
iterations = 0
while( magnitude(z) &lt; 4.0 and iterations &lt; max_iterations )
     z = z^2 + c
     iterations = iterations + 1
</programlisting>

The Julibrot function has two complex parameters, or four real
ones. In Gnofract 4D I refer to the real parameters as x, y, z, and w:
these are c.re , c.im, z0.re and z0.im respectively.

The only difference is which points we choose to draw. To draw the
Mandelbrot set, we keep <emphasis>z0</emphasis> constant and change
<emphasis>c</emphasis> with each pixel. To draw the Julia set, we keep
<emphasis>c</emphasis> constant and change <emphasis>z0</emphasis>. If
you squint with your brain a bit, you can imagine both sets as
orthogonal "slices" through the same four-dimensional object. In
Gnofract 4D terms, the Mandelbrot set is the <emphasis>xy</emphasis>
plane, and the Julia set is the <emphasis>zw</emphasis> plane. We can
also look at other planes: here's an image of the
<emphasis>xw</emphasis> plane:

<graphic align="center" format="PNG"
fileref="figures/xw_plane.png"> </graphic>

</para>
</sect2>

<sect2 id="viewing">
<title>Viewing in Four Dimensions</title>
<para>
However, we can draw any 2D slice we like, not just those which are
parallel to the Julibrot axes. To do this we'll need to describe our
scene by four things. First, the (<emphasis>x,y,z,w</emphasis>)
coordinates of the center of the screen. Second, a vector for the
x-axis of the screen. This tells us how to change the parameters to
the Julibrot function as we proceed across the screen. Third, a vector
for the y-axis. Fourth and finally, the size of the image. For the
Mandelbrot set, our "default" view, the screen is centered at
[0,0,0,0], the x-vector is [1,0,0,0] and the y-vector is
[0,1,0,0]. The initial size is 4, because the whole Mandelbrot set
fits inside the 2x2 square. We can zoom into the set by changing
<emphasis>x</emphasis> and <emphasis>y</emphasis> and the zoom factor.
</para>
<para>
If we want to draw other slices, we need to rotate our view through
four dimensions. In 3D, we can rotate in 3 directions: around the
<emphasis>x</emphasis>, <emphasis>y</emphasis>, and
<emphasis>z</emphasis> axes. In 4D, we rotate around a <emphasis>
plane </emphasis> rather than a line, and we can rotate in 6
directions: around the <emphasis>xy, xz, xw, yz, yw</emphasis> and
<emphasis>zw</emphasis> planes. For example, if we rotate through 90
degrees in the xz and yw directions, our screen vectors become
[0,0,1,0] and [0,0,0,1]: in other words, the Julia set. If we rotate
only part of the way, we get a "hybrid" between the two sets, which
looks decidedly odd:

<graphic align="center" format="PNG" fileref="figures/hybrid.png">
</graphic>

In fact, we can rotate to any angle in each of the planes,
creating a whole world of bizarre pictures.
</para>

</sect2>

<sect2 id="hypercomplex">
<title>Hypercomplex Fractals and Quaternions</title> 

<para> There are other kinds of fractal which are commonly described
as "four-dimensional" - hypercomplex and quaternion-based
fractals. Gnofract 4D doesn't currently support these fractals
directly (though you can create your own quaternion-based formulas),
so they're only mentioned here to clarify the difference. (If you want
to generate hypercomplex fractals I recommend you try <ulink
url="http://www.physcip.uni-stuttgart.de/phy11733/quat_e.html">
Quat</ulink>.) Hypercomplex numbers have four components (one real and
three imaginary) where complex numbers have two. Since the
hypercomplex mandelbrot has two hypercomplex parameters, in Gnofract
4D terms it's actually an eight-dimensional object.  </para>

</sect2>
</sect1>

<sect1 id="types">
<title>Fractal Types</title>
<para> Gnofract 4D supports a variety of fractal formulae apart from the
vanilla mandelbrot set. These have been pillaged from a variety of
sources, notably <emphasis>Fractint</emphasis>. I've tried to keep the names
consistent. 
</para>
<para>
The <emphasis>Quadratic</emphasis> function
calculates a family of functions of the form A*z^2 - B*z + C*c.
The <emphasis>Cubic Mandelbrot</emphasis> function calculates z^3 + c, rather
than the standard z^2 +c. 
<emphasis>MandelZPower</emphasis> calculates z^A + c, where A is a complex parameter. 
Setting this to 2.0 produces the standard Mandelbrot set, and 3.0 produces the cubic mandelbrot. The more specialized functions are naturally much faster.
</para>
<para>
The <emphasis>Lambda</emphasis> function calculates lambda * z * ( 1 - z). The
complex parameter <emphasis>lambda</emphasis> is set by the z and w
parameters, so if lambda is zero, all you'll see is a blank screen.
</para>
<para>
The <emphasis>Barnsley</emphasis> fractals originally come from Michael Barnsley's book
<emphasis>Fractals Everywhere</emphasis>, though I haven't seen the book and
have copied the implementation from Fractint. 
</para>
<para>
The <emphasis>Mandelbar</emphasis> fractal is the same as the Mandelbrot, except that the complex conjugate of the number is used at each iteration step, eg z &lt;- (x + i |y|)^2 + c.
</para>
<para>
The <emphasis>Burning Ship</emphasis> and <emphasis>Buffalo</emphasis> fractals are
described on the web page <ulink
url="http://www.theory.org/fracdyn/">http://www.theory.org/fracdyn/</ulink>.
The Burning Ship is essentially a Mandelbrot variant where the real
and imaginary parts of the current point are set to their absolute
values after each iteration, ie z &lt;- (|x| + i |y|)^2 + c. The Buffalo
fractal uses the same method with the function z &lt;- z^2 - z + c,
making it equivalent to the Quadratic type with the "absolute value"
modification.
</para>

<para><emphasis>Nova</emphasis> is Paul Derbyshire's Nova fractal.</para>
<para><emphasis>Newton</emphasis> is the Newton-Raphson method applied to z^a - 1.</para>
<para><emphasis>Magnet</emphasis> and <emphasis>Magnet 2</emphasis> are from Fractint, but images generated by Gnofract 4D look a bit different because I don't look for a finite attractor.</para>
<para><emphasis>Tetrate</emphasis> computes z &lt;- z^c - arguably the simplest function here, but the results are fantastically intricate.</para>
</sect1>

<sect1 id="compiler">
<title>Writing Your Own Functions</title>

<para>
When you get tired of the built-in fractal functions, you can write
your own, or take advantage of thousands of formulas written by other
fractal enthusiasts. Gnofract4D can load most fractal formula files
written for Fractint (and some written for UltraFractal), and because
it compiles the formula into native code for your processor, they will
usually render much faster than they would with Fractint. However the
compiler is not 100% backwards-compatible with Fractint, so
unfortunately some fractals can't be loaded, or will display
differently when they do. Gnofract 4D also supports many constructs
Fractint doesn't, so you need to take extra care when writing formulas
if you want them to work in Fractint too.
</para>

<para>
Here are links to some online resources for formula files:
<itemizedlist>

<listitem><para> <ulink
url="http://home.att.net/~Paul.N.Lee/OrgForm.html">ORGFORM.ZIP</ulink>
A collection of about 25,000 Fractint formula files by many authors,
originally compiled by George C. Martin and currently maintained by
Paul N. Lee. Indispensable. </para></listitem>

<listitem><para> <ulink
url="http://formulas.ultrafractal.com/">UltraFractal public formula
database</ulink> Over 4.5MB of formulas by users of UltraFractal. Many
(but by no means all) of these will work with Gnofract 4D. Let me know
of any issues, since I aim to improve compatibility further in future
releases. </para></listitem>

</itemizedlist>
</para>

<sect2 id="tutorial">
<title>Writing Your First Formula</title>

</sect2>

<sect2 id="formula_compat">
<title>Compatibility Notes</title>

<para>
Most Fractint formulas are compatible with Gnofract 4D, but not
all. Gnofract 4D also supports many extensions (most of which are
taken from UltraFractal), which Fractint doesn't understand.
</para>
<para>
Specific differences:
<itemizedlist>

<listitem><para> 

</para></listitem>

<listitem><para> 

</para></listitem>

</itemizedlist>

</para>

</sect2>

</sect1>

<sect1 id="reference">
<title>Formula Language Reference</title>
&stdlib;
</sect1>

<sect1 id="mouse">
<title>Mouse and Keyboard Functions</title> 

<para>
Clicking with the left mouse button zooms in, making the picture twice
as large as before. The new image is centered on the point where you
clicked the mouse. If you click and drag with the left button, you can
draw a white box around an area. When you let go, the image zooms in
so that the area inside that box fills the window. 
</para>

<para>
Clicking with the right mouse button zooms out, making the picture
twice as small as before. There isn't a click and drag feature for the
right button.
</para>

<para>
Clicking with the middle button rotates by 90 degrees in the
<emphasis>xz</emphasis> and <emphasis>yw</emphasis> axes. If you're currently looking
at the Mandelbrot set, you'll get a Julia set, and vice versa. If
you're looking at something else, you'll get something weird. Note
that clicking this twice doesn't take you back to where you started:
the screen gets recentered on the point you clicked.
</para> 

<para>
In explorer mode, the central window behaves the same as normal - you
can zoom as normal. The smaller windows only understand left-click,
which transfers that image to the central window.  </para>

<para>
The cursor keys pan around the image. Hold down Control + cursor to
move more quickly. Hold down Alt+ cursor to move around in the other
two dimensions, mutating the image.
</para>
</sect1>

<sect1 id="toolbar">
<title>Toolbar buttons</title>
<para>
On the left of the toolbar you can see a small preview window, which
updates as you change the angle or position buttons, to give you an
idea of what the fractal will look like when you release the button.
</para>

<para>
The first eight toolbar buttons correspond to the ten parameters which
define the view. The circular angle buttons, labelled <emphasis>xy</emphasis> to
<emphasis>zw</emphasis>, can changed by dragging the dot around. When you let
go, the fractal will update. You can see the angle's current value in
degrees in the status bar. By the way, the <emphasis>zw</emphasis> angle does
work, you just can't see its effects until you rotate in some other
dimensions first.
</para>

<para>
The square position buttons, <emphasis>xy</emphasis> and
<emphasis>zw</emphasis>, can be used to alter the view. The
<emphasis>xy</emphasis> button allows you to pan around the current
view (it doesn't move along the actual <emphasis>x</emphasis> or
<emphasis>y</emphasis> axes, but along axes relative to the current
view). The <emphasis>zw</emphasis> button allows you to move along the
other two axes, resulting in a mutated version of the current image.
Click inside one then drag the mouse, watching the preview window
update, then release the mouse when you like the results.  </para>

<para>
The weird black and white button (OK, so I can't draw) allows you to
increase the current interation count, for those occasions when the
auto-deepening doesn't get it right.  </para> <para> The
<emphasis>Undo</emphasis> and <emphasis>Redo</emphasis> buttons should
be fairly obvious. You can undo as many times as you like. Note that
undo also affects parameters such as color, not just position on
screen.  </para>

<para>

The <emphasis>Explore</emphasis> mode helps you find neat-looking fractals
easily. It divides the screen into a large central section and smaller
"subfractals" which surround it.The central section is
the main image - you can click on this to zoom in, or update it as
normal. The other images around the edges are "mutant" versions
of the main image - they're formed by starting with the base
parameters and randomly changing them a bit. Whenever you change the
main images, you get a whole new set of mutants. If you like a mutant
more than the main picture, click on it to move it to the middle - it
then becomes the main picture and you get eight new mutants based on
the new main image. To return to normal mode, click the Explorer
button again.
</para>
<para>
The "weirdness slider" determines how different the mutants are from
the standard image. If it's set to 1.0, they're almost unrecognizable
- if it's 0.0, they're exactly the same. You can also generate more
mutants with the refresh button.
</para>
</sect1>

<sect1 id="filemenu">
<title>File Menu</title> 
<para>
<guimenuitem>Save Image</guimenuitem> writes the current image to
disk. Only the PNG and JPEG image formats are supported. I recommend
using PNG images for high quality output, and JPEGs only when image
size is important, because JPEGs introduce artifacts which blur the
fine details of your fractal.

<guimenuitem>Open Parameter File</guimenuitem> and <guimenuitem>Save Parameter File</guimenuitem> load and save plain-text parameter
description files (extension ".fct"), so you can return to images in the future.
<guimenuitem>Pause</guimenuitem> temporarily halts the current
calculation, in the unlikely event you have something more important
than generating fractals to do.
</para>
</sect1>

<sect1 id="preferences">
<title>Settings Menu</title> 

<para> You can set all the fractal's parameters from here. Settings
are divided into <emphasis>Fractal Settings</emphasis> and
<emphasis>Preferences</emphasis>.  <emphasis>Fractal
Settings</emphasis> are saved in the fractal's .fct file - they are
properties of the fractal itself. By contrast, <emphasis>
preferences</emphasis> are your preferences for Gnofract 4D's general
behavior and are saved in Gnofract 4D's config file
(~/.gnome/gnofract4d). <emphasis>Colors</emphasis> are also saved in
the .fct file.
</para>

<sect2 id="prefdialog">
<title>Fractal Settings</title>
<sect3 id="function">
<title>Function Section</title>
<para>
Allows you to choose which fractal type to draw. See <xref
linkend="types"/> for details of the types available.
</para>
</sect3>

<sect3 id="parameters">
<title>Parameters</title>
<para>
Some fractal types (such as the Quadratic fractal) have additional
parameters which you can set. These are displayed here. What
parameters there are depends on the fractal type.
</para>
</sect3>

<sect3 id="rendering">
<title>Rendering Section</title> <para> This has various options to
trade off image quality against rendering time and generally change
the appearance of the image.

<emphasis>Antialiasing</emphasis> makes the image smoother and nice looking,
but takes a lot longer to draw (up to five times
longer). <emphasis>Default</emphasis> antialiasing is quite a lot faster than
<emphasis>Best</emphasis> mode, but can miss some small details.

<emphasis>Max Iterations</emphasis> sets the number of iterations a point will
go through before we give up and assume it's a member of the Julibrot.

If <emphasis>Auto Deepening</emphasis> is on, the maximum number of iterations
is set automatically by Gnofract 4D but you can change it by hand whenever
you like.

<emphasis> Inner </emphasis> and <emphasis> Outer </emphasis> select
the function used to translate the raw fractal data into colors, for
the inside and outside of the set respectively. The functions have the
following effects: <emphasis>Iteration Count</emphasis> uses the
number of iterations required to bail out to set the color directly.
<emphasis> Continuous Potential </emphasis> gives a much smoother
image, by basing the color not only on how many iterations the point
took to escape, but on how far away from the origin it ended up on its
last iteration. <emphasis>Ejection Distance</emphasis> ignores the
count altogether and uses only the distance. <emphasis>
Decomposition</emphasis> chooses one of four colors based on the
location in the complex plane of the point's final position.<emphasis>
Angle</emphasis> translates the angle between the point's final
position and the x-axis into a color.</para> </sect3>

<sect3 id="bailout">
<title>Bailout Section</title>
<para>
The <emphasis>Bailout Function</emphasis> is used to decide whether a point
has left the set. If <emphasis>function(z)</emphasis> is greater than the
<emphasis>Distance</emphasis>, the point has left the set. A few functions
don't work very well with some fractal types, for example Barnsley
fractals don't mix well with the <emphasis>Or</emphasis> bailout function.

</para>
</sect3>

<sect3 id="image">
<title>Other Sections</title>
<para>
<emphasis>Width</emphasis> and <emphasis>Height</emphasis> 
set the size of the image in pixels.

The <emphasis>Location</emphasis> entryboxes allow you to
change the coordinates of the screen center and the image size. 

The <emphasis>Angles</emphasis> tab allows you to set the rotation
angles. Only values between 0 and 2 * pi are different; values outside
this range "wrap" to points inside that range.
</para>
</sect3>
</sect2>
<sect2 id="colors">
<title>Color Browser</title>
<para>
The Color Browser is designed to let you quickly choose a color scheme
which suits the current fractal, by generating a set of previews to
choose between. To update the previews to match the current fractal,
click <emphasis> Refresh</emphasis>. To apply a colormap to the main image,
click the map.
</para>
</sect2>

<sect2 id="preferences2">
<title>Preferences</title> <para> There's only one set of preferences
at the moment- the compiler preferences. Gnofract 4D needs a C++ compiler to
be available at runtime in order to work (it dynamically creates the
code to compute a particular fractal when you ask for that
fractal). This section allows you to specify a location for the
compiler and options to pass to it. <emphasis>If Gnofract 4D is working
fine, I suggest you leave this area alone.</emphasis></para>
</sect2>

</sect1>

<sect1 id="bugs">
<title>Bugs and Known Issues</title>

<sect2 id="reporting">

<title>Reporting Bugs</title> 

<para>
<emphasis>Please</emphasis> report any bugs you encounter, either by
mailing <ulink
url="mailto:edwin@sourceforge.net">edwin@sourceforge.net</ulink> or by
using the <ulink url="http://sourceforge.net/projects/gnofract4d/">bug
form</ulink> at SourceForge. I'll do my best to fix them.
</para>

</sect2>

<sect2 id="compat">
<title>Backwards Compatibility</title>

<para>
Version 2.0 contains major architectural changes from version 1.x, so
unfortunately not all images generated by earlier versions will look
exactly the same or even load correctly. If you have a favorite image
which doesn't work any more, mail me the .fct file and I'll try and
convert it. I hope to fix most of these issues in future versions.
</para>
<para>
Specific known issues:
<itemizedlist>

<listitem> <para> Files generated by Gnofract 4D versions older than
1.4 can't be loaded. </para>
</listitem>

<listitem> <para> Color ranges (as opposed to color maps) are not
supported. </para> </listitem>

<listitem> <para> Nova and Newton fractals may have different
coloration. This is because older versions used a tolerance
calculation which was dependent on the image size. I decided that was
a lousy idea so now the tolerance is fixed. </para> </listitem>

<listitem> <para> Only one colormap per file is supported (the outer
one). Inner colormaps are ignored. </para> </listitem>

</itemizedlist>

</para>

</sect2>
</sect1>

<sect1 id="about">
<title>About Gnofract 4D</title>
<para>

This is Gnofract 4D version 1.9. You can find the most recent version of
Gnofract 4D from <ulink url="http://gnofract4d.sourceforge.net">
http://gnofract4d.sourceforge.net/</ulink>. 
</para>
<para>
Gnofract 4D was originally based on Gnofract, written by Aurelien Alleaume
<ulink url="mailto:manchot@club-internet.fr">(manchot@club-internet.fr)
</ulink>,
though none of the original code remains in the current version.
Gnofract could once be obtained from
<ulink url="http://www.multimania.com/mason/">
http://www.multimania.com/mason/</ulink> but this no longer appears to
work.  The new code in Gnofract 4D is by Edwin Young <ulink
url="mailto:edwin@sourceforge.net">(edwin@sourceforge.net) </ulink>.
Gnofract 4D contains code from <emphasis>gundo</emphasis>, by Nat Pryce, and
palette files (by a number of authors) which were originally
distributed with <ulink
url="http://spanky.triumf.ca/">Fractint</ulink>.
</para>
<para>
Gnofract 4D is distributed under the <emphasis>Gnu General Public
License</emphasis>. See the file "COPYING" for details.
</para>
</sect1>

</article>

