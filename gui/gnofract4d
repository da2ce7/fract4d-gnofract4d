#!/usr/bin/env python

# the main GUI program. Relies on fract4d libs to do the real work

import sys
import os
import struct
import math
import types

import gtk
import gobject

# so we can run without installing.
# FIXME is there a better way?
sys.path.append("..")

from fract4d import fractal,fc,fract4dc

import gtkfractal
import settings
import preferences
import autozoom
import model
import colors

# We don't use GDK threads because RedHat seem to compile pygtk
# without thread support. Grrr.
#gtk.gdk.threads_init()


class MainWindow:
    def __init__(self):
        # create global fractal compiler and load standard formula and
        # coloring algorithm files
        self.compiler = fc.Compiler()
        self.compiler.file_path.append("../fract4d")
        self.compiler.load_formula_file("gf4d.frm")
        self.compiler.load_formula_file("gf4d.cfrm")

        self.window = gtk.Window()
        self.window.connect('destroy', self.quit)
        
        self.accelgroup = gtk.AccelGroup()
        self.window.add_accel_group(self.accelgroup)
        #self.window.connect('key-press-event', self.on_key_press)
        
        self.vbox = gtk.VBox()
        self.window.add(self.vbox)
        
        self.f = gtkfractal.T(self.compiler)

        if len(sys.argv) > 1:
            self.load(sys.argv[1])

        self.set_filename(None)
        self.model = model.Model(self.f)

        preferences.userPrefs.connect('preferences-changed',
                                      self.on_prefs_changed)

        self.update_compiler_prefs(preferences.userPrefs)
        self.update_image_prefs(preferences.userPrefs)
        
        self.create_menu()
        self.create_toolbar()
        self.create_fractal(self.f)
        self.create_status_bar()
        
        self.window.show_all()

        self.statuses = [ "Done",
                          "Calculating",
                          "Deepening",
                          "Antialiasing",
                          "Paused" ]

    def create_fractal(self,f):
        window = gtk.ScrolledWindow()
        window.set_policy(gtk.POLICY_AUTOMATIC,gtk.POLICY_AUTOMATIC)
        
        f.connect('parameters-changed', self.on_fractal_change)
        
        f.draw_image()

        window.set_size_request(640+2,480+2)
        window.add_with_viewport(self.f.widget)
        f.connect('progress_changed', self.progress_changed)
        f.connect('status_changed',self.status_changed)
        
        self.vbox.pack_start(window)

    def update_compiler_prefs(self,prefs):
        # update compiler
        self.compiler.compiler_name = prefs.get("compiler","name")
        self.compiler.flags = prefs.get("compiler","options")
        self.f.update_formula()

    def update_image_prefs(self,prefs):
        (w,h) = (prefs.getint("display","width"),
                 prefs.getint("display","height"))
        self.f.set_size(w,h)
        self.f.set_auto_deepen(prefs.getboolean("display","autodeepen"))
        self.f.set_antialias(prefs.getint("display","antialias"))

    def on_prefs_changed(self,prefs):
        self.f.freeze()
        self.update_compiler_prefs(prefs)
        self.update_image_prefs(prefs)
        self.f.thaw()
        self.f.draw_image()
        
    def on_fractal_change(self,object):
        self.f.draw_image()

    def set_filename(self,name):
        self.filename = name
        if self.filename == None:
            title = "(Untitled %s)" % self.f.funcName
        else:
            title = self.filename
        self.window.set_title(title)
        
    def on_key_press(self, event, *args):
        print "key:", event.keyval
        
    def progress_changed(self,f,progress):
        self.bar.set_fraction(progress/100.0)

    def status_changed(self,f,status):
        if status == 2:
            # deepening
            text = "Deepening (%d iterations)" % self.f.maxiter
        else:
            text = self.statuses[status]
            
        self.bar.set_text(text)
        
    def create_menu(self):
        menu_items = (
            ('/_File', None, None, 0, '<Branch>' ),
            ('/File/_Open...', '<control>O', self.open, 0, '<StockItem>', gtk.STOCK_OPEN),
            ('/File/_Save', '<control>S', self.save, 0, '<StockItem>', gtk.STOCK_SAVE),
            ('/File/Save _As...', '<control><shift>S', self.saveas, 0, '<StockItem>', gtk.STOCK_SAVE_AS),
            ('/File/Save _Image', '<control>I', self.save_image, 0, ''),
            ('/File/sep1', None, None, 0, '<Separator>'),
            ('/File/_Quit', '<control>Q', self.quit, 0, '<StockItem>', gtk.STOCK_QUIT),   

            ('/_Edit', None, None, 0, '<Branch>'),
            ('/Edit/_Fractal Settings...','<control>F',self.settings, 0, ''),
            ('/Edit/_Colors...', '<control>L', self.colors, 0, ''),
            ('/Edit/_Preferences...', None, self.preferences, 0, '<StockItem>', gtk.STOCK_PREFERENCES),
            ('/Edit/_Undo', '<control>Z', self.undo, 0, ''),
            ('/Edit/_Redo', '<control>Y', self.redo, 0, ''),
            ('/Edit/R_eset', 'Home', self.reset, 0, '<StockItem>', gtk.STOCK_HOME),

            ('/_Tools', None, None, 0, '<Branch>'),
            ('/_Tools/_Autozoom', '<control>A', self.autozoom, 0, ''),

            ('/_Help', None, None, 0, '<Branch>'),
            ('/_Help/Contents', 'F1', self.contents, 0, ''),
            ('/Help/_About', None, self.about, 0, ''),
            )
    
        item_factory = gtk.ItemFactory(gtk.MenuBar, '<main>', self.accelgroup)
        item_factory.create_items(menu_items)

        menubar = item_factory.get_widget('<main>')

        undo = item_factory.get_item("/Edit/Undo")
        self.model.seq.make_undo_sensitive(undo)
        redo = item_factory.get_item("/Edit/Redo")
        self.model.seq.make_redo_sensitive(redo)
        
        self.vbox.pack_start(menubar, expand=gtk.FALSE)
        
    def create_status_bar(self):
        self.bar = gtk.ProgressBar()
        self.vbox.pack_end(self.bar, expand=gtk.FALSE)

    def create_toolbar(self):
        self.toolbar = gtk.Toolbar()
        self.toolbar.append_item("preview",None,None,None,None,None)
        self.toolbar.insert_stock(
            gtk.STOCK_UNDO,
            "Undo the last change",
            "Undo the last change",
            self.undo,
            None,
            -1)

        self.model.seq.make_undo_sensitive(self.toolbar.get_children()[-1])
        
        self.toolbar.insert_stock(
            gtk.STOCK_REDO,
            "Redo the last undone change",
            "Redo the last undone change",
            self.redo,
            None,
            -1)

        self.model.seq.make_redo_sensitive(self.toolbar.get_children()[-1])

        self.vbox.pack_start(self.toolbar,expand=gtk.FALSE)
        
    def save(self,action,widget):
        print "save"

    def saveas(self,action,widget):
        print "save as"

    def confirm(self,name):
        'if this file exists, check with user before overwriting it'
        if os.path.exists(name):
            d = gtk.MessageDialog(self.window, gtk.DIALOG_MODAL,
                                  gtk.MESSAGE_QUESTION,
                                  gtk.BUTTONS_YES_NO,
                                  "File %s already exists. Overwrite?" % name)
            response = d.run()                
            d.destroy()
            return response == gtk.RESPONSE_YES
        else:
            return True

    def show_error_message(self,message):
        d = gtk.MessageDialog(self.window, gtk.DIALOG_MODAL,
                              gtk.MESSAGE_ERROR, gtk.BUTTONS_OK,
                              message)
        d.run()
        d.destroy()

    def save_image(self,action,widget):
        fs = gtk.FileSelection("Save Image")
        fs.show_all()
        fs.complete("*.png")
        
        name = None
        while True:
            result = fs.run()
            if result == gtk.RESPONSE_OK:
                name = fs.get_filename()
            else:
                break
            
            if name and self.confirm(name):
                try:
                    self.f.save_image(name)
                    break
                except Exception, err:
                    self.show_error_message("Error saving %s:\n%s" % (name, err))
        fs.destroy()
                
    def settings(self,action,widget):
        settings.show_settings(self.window,self.f)
        
    def colors(self,action,widget):
        colors.show_colors(self.window,self.f)
        
    def preferences(self,action,widget):
        preferences.show_preferences(self.window, self.f)
        
    def undo(self,*args):
        self.model.undo()
        
    def redo(self,*args):
        self.model.redo()
        
    def reset(self,action,widget):
        self.f.reset()

    def autozoom(self,action,widget):
        autozoom.show_autozoom(self.window, self.f)
        
    def contents(self,action,widget):
        self.display_help()

    def display_help(self,section=None):
        base_help_file = "gnofract4d-manual.xml"
        loc = "C" # FIXME

        # look locally first to support run-before-install
        build_dir = "../doc/gnofract4d-manual/%s/" % loc
        helpfile = os.path.join(build_dir,base_help_file)
        abs_file = os.path.abspath(helpfile)
        
        if not os.path.isfile(abs_file):
            # otherwise try where the installer should have put it
            dir = "share/gnome/help/gnofract4d/%s/" % loc
            abs_file = os.path.join(sys.exec_prefix, dir, base_help_file)

        if not os.path.isfile(abs_file):
            self.show_error_message("Can't find help file %s" % abs_file)
            return
        
        if section == None:
            anchor = ""
        else:
            anchor = "#" + section

        os.system("yelp ghelp://%s%s 2>/dev/null &" % (abs_file, anchor))

    def open(self,action,widget):
        fs = gtk.FileSelection("Open Parameter File")
        fs.show_all()
        fs.complete("*.fct")
        
        while True:
            result = fs.run()            
            if result == gtk.RESPONSE_OK:
                if self.load(fs.get_filename()):
                    break
            else:
                break
            
        fs.destroy()

    def load(self,file):
        try:
            self.f.loadFctFile(open(file))
            self.set_filename(file)
            return True
        except Exception, err:
            self.show_error_message("Error opening %s: '%s'" % (file, err))
            return False
        
    def about(self,action,widget):
        self.display_help("about")

    def quit(self,action,widget=None):
        try:
            preferences.userPrefs.save()
            self.compiler.clear_cache()
        finally:
            gtk.main_quit()

def main():
    mainWindow = MainWindow()
    gtk.main()
    
if __name__ == '__main__':
    main()
